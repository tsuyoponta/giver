# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1

jobs:
  build:
    docker:
      # specify the version you desire here
      # ruby2.6.5を使ったアプリのため
      - image: circleci/ruby:2.6.5-node-browsers
        environment:
      # bundlerのバージョンが2.0.1以上だと、bundle installに失敗するので、環境として指定
          - BUNDLER_VERSION: 2.2.14
      # circleCIは仮想環境を構築するので、使用するデータベースを指定
          - RAILS_ENV: 'test'
      # Mysqlのバージョンを指定
      - image: circleci/mysql:5.6
        environment:
          - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
          - MYSQL_ROOT_HOST: '127.0.0.1'

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/projects/giver

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-

      # bundlerは2.0.1以降のものを使っているので、環境変数と合わせて指定
      - run:
          name: install dependencies
          command: |
            gem install bundler -v 2.2.14
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # database.ymlとdatabase.yml.ciを入れ替える記述
      - run: mv config/database.yml.ci config/database.yml 

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # rubocopを走らせる記述
      - run:
          name: Rubocop
          command: bundle exec rubocop

      # rspecを走らせる記述
      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"
              
            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  deploy:
    machine:
      enabled: true
    steps:
      - add_ssh_keys:
          fingerprints:
            - f4:c7:fd:6c:24:69:1f:fd:e3:c1:11:17:26:4f:14:92
      - run:
          command: |
            ssh ${SSH_USER}@${SSH_HOST} "cd ~/giver && git pull origin master"

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master